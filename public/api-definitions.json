{
  "version": "1.1.0",
  "generated_at": "2025-09-24T16:32:41+00:00",
  "source": "index.html",
  "queries": {
    "identity": {
      "label": "Identity Queries",
      "queries": {
        "getIdentity": {
          "label": "Get Identity",
          "description": "Fetch an identity by its identifier.",
          "inputs": [
            {
              "name": "id",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "identities.fetch"
        },
        "getIdentityUnproved": {
          "label": "Get Identity (Unproved)",
          "description": "Fetch an identity without requesting cryptographic proofs.",
          "inputs": [
            {
              "name": "id",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "identities.fetchUnproved"
        },
        "getIdentityKeys": {
          "label": "Get Identity Keys",
          "description": "Retrieve public keys for an identity, including support for specific key IDs or purpose searches.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "keyRequestType",
              "type": "select",
              "label": "Key Request Type",
              "required": true,
              "options": [
                {
                  "value": "all",
                  "label": "All Keys"
                },
                {
                  "value": "specific",
                  "label": "Specific Key IDs"
                },
                {
                  "value": "search",
                  "label": "Search by Purpose Map"
                }
              ]
            },
            {
              "name": "specificKeyIds",
              "type": "array",
              "label": "Specific Key IDs",
              "placeholder": "[0,1,2]",
              "dependsOn": {
                "field": "keyRequestType",
                "values": [
                  "specific"
                ]
              }
            },
            {
              "name": "searchPurposeMap",
              "type": "json",
              "label": "Search Purpose Map",
              "help": "JSON map of purpose -> security level -> filter (e.g. {\"0\": {\"0\": \"current\"}}).",
              "placeholder": "{\"0\": {\"0\": \"current\"}, \"1\": {\"0\": \"all\"}}",
              "dependsOn": {
                "field": "keyRequestType",
                "values": [
                  "search"
                ]
              }
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "offset",
              "type": "number",
              "label": "Offset"
            }
          ],
          "sdk_method": "identities.getKeys"
        },
        "getIdentitiesContractKeys": {
          "label": "Get Contract Keys for Identities",
          "description": "Fetch contract-specific keys for one or more identities.",
          "inputs": [
            {
              "name": "identityIds",
              "type": "array",
              "label": "Identity IDs",
              "required": true,
              "placeholder": "[\"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"]"
            },
            {
              "name": "contractId",
              "type": "text",
              "label": "Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "purposes",
              "type": "multiselect",
              "label": "Key Purposes",
              "options": [
                {
                  "value": "0",
                  "label": "Authentication (0)"
                },
                {
                  "value": "1",
                  "label": "Encryption (1)"
                },
                {
                  "value": "2",
                  "label": "Decryption (2)"
                },
                {
                  "value": "3",
                  "label": "Transfer (3)"
                },
                {
                  "value": "5",
                  "label": "Voting (5)"
                }
              ]
            }
          ],
          "sdk_method": "identities.contractKeys"
        },
        "getIdentityNonce": {
          "label": "Get Identity Nonce",
          "description": "Retrieve the global nonce associated with an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "identities.nonce"
        },
        "getIdentityContractNonce": {
          "label": "Get Identity Contract Nonce",
          "description": "Retrieve the per-contract nonce for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "contractId",
              "type": "text",
              "label": "Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            }
          ],
          "sdk_method": "identities.contractNonce"
        },
        "getIdentityBalance": {
          "label": "Get Identity Balance",
          "description": "Fetch the credit balance for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "identities.balance"
        },
        "getIdentitiesBalances": {
          "label": "Get Multiple Identity Balances",
          "description": "Fetch balances for multiple identities in a single request.",
          "inputs": [
            {
              "name": "identityIds",
              "type": "array",
              "label": "Identity IDs",
              "required": true,
              "placeholder": "[\"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"]"
            }
          ],
          "sdk_method": "identities.balances"
        },
        "getIdentityBalanceAndRevision": {
          "label": "Get Identity Balance & Revision",
          "description": "Retrieve both the balance and revision number for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "identities.balanceAndRevision"
        },
        "getIdentityByPublicKeyHash": {
          "label": "Get Identity by Unique Public Key Hash",
          "description": "Lookup an identity via its unique public key hash.",
          "inputs": [
            {
              "name": "publicKeyHash",
              "type": "text",
              "label": "Public Key Hash",
              "required": true,
              "placeholder": "b7e904ce25ed97594e72f7af0e66f298031c1754"
            }
          ],
          "sdk_method": "identities.byPublicKeyHash"
        },
        "getIdentityByNonUniquePublicKeyHash": {
          "label": "Get Identity by Non-Unique Public Key Hash",
          "description": "Lookup identities that match a non-unique public key hash.",
          "inputs": [
            {
              "name": "publicKeyHash",
              "type": "text",
              "label": "Public Key Hash",
              "required": true,
              "placeholder": "518038dc858461bcee90478fd994bba8057b7531"
            },
            {
              "name": "startAfter",
              "type": "text",
              "label": "Start After (Key ID)",
              "help": "Resume pagination using the previous key identifier."
            }
          ],
          "sdk_method": "identities.byNonUniquePublicKeyHash"
        },
        "getIdentityTokenBalances": {
          "label": "Get Identity Token Balances",
          "description": "Retrieve balances for a set of token IDs held by an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "tokenIds",
              "type": "array",
              "label": "Token IDs",
              "required": true,
              "placeholder": "[\"Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv\"]"
            }
          ],
          "sdk_method": "identities.tokenBalances"
        },
        "getIdentitiesTokenBalances": {
          "label": "Get Token Balances for Identities",
          "description": "Fetch balances for multiple identities for a single token.",
          "inputs": [
            {
              "name": "identityIds",
              "type": "array",
              "label": "Identity IDs",
              "required": true,
              "placeholder": "[\"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"]"
            },
            {
              "name": "tokenId",
              "type": "text",
              "label": "Token ID",
              "required": true,
              "placeholder": "Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv"
            }
          ],
          "sdk_method": "tokens.balances"
        },
        "getIdentityTokenInfos": {
          "label": "Get Identity Token Info",
          "description": "Retrieve token metadata and balances for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "tokenIds",
              "type": "array",
              "label": "Token IDs (optional)",
              "placeholder": "[\"Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv\"]"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "offset",
              "type": "number",
              "label": "Offset"
            }
          ],
          "sdk_method": "tokens.identityTokenInfos"
        },
        "getIdentitiesTokenInfos": {
          "label": "Get Token Info for Identities",
          "description": "Retrieve token metadata for multiple identities for a single token.",
          "inputs": [
            {
              "name": "identityIds",
              "type": "array",
              "label": "Identity IDs",
              "required": true,
              "placeholder": "[\"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"]"
            },
            {
              "name": "tokenId",
              "type": "text",
              "label": "Token ID",
              "required": true,
              "placeholder": "Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv"
            }
          ],
          "sdk_method": "tokens.identitiesTokenInfos"
        }
      }
    },
    "dataContract": {
      "label": "Data Contract Queries",
      "queries": {
        "getDataContract": {
          "label": "Get Data Contract",
          "description": "Fetch a data contract by its identifier.",
          "inputs": [
            {
              "name": "id",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            }
          ],
          "sdk_method": "contracts.fetch"
        },
        "getDataContractHistory": {
          "label": "Get Data Contract History",
          "description": "Retrieve the version history for a data contract.",
          "inputs": [
            {
              "name": "dataContractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "HLY575cNazmc5824FxqaEMEBuzFeE4a98GDRNKbyJqCM"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "startAtMs",
              "type": "number",
              "label": "Start Timestamp (ms)"
            }
          ],
          "sdk_method": "contracts.getHistory"
        },
        "getDataContracts": {
          "label": "Get Data Contracts",
          "description": "Fetch multiple data contracts by their identifiers.",
          "inputs": [
            {
              "name": "ids",
              "type": "array",
              "label": "Data Contract IDs",
              "required": true,
              "placeholder": "[\"GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec\",\"ALybvzfcCwMs7sinDwmtumw17NneuW7RgFtFHgjKmF3A\"]"
            }
          ],
          "sdk_method": "contracts.getMany"
        }
      }
    },
    "document": {
      "label": "Document Queries",
      "queries": {
        "getDocuments": {
          "label": "Get Documents",
          "description": "Query documents from a data contract using optional filters.",
          "inputs": [
            {
              "name": "dataContractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true,
              "placeholder": "domain"
            },
            {
              "name": "where",
              "type": "json",
              "label": "Where Clause (JSON)",
              "placeholder": "[[\"normalizedParentDomainName\", \"==\", \"dash\"], [\"normalizedLabel\", \"==\", \"therea1s11mshaddy5\"]]"
            },
            {
              "name": "orderBy",
              "type": "json",
              "label": "Order By (JSON)",
              "placeholder": "[[\"$createdAt\",\"desc\"]]"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "startAfter",
              "type": "text",
              "label": "Start After",
              "help": "Document ID or index value to resume from."
            },
            {
              "name": "startAt",
              "type": "text",
              "label": "Start At",
              "help": "Explicit starting index value (JSON string)."
            }
          ],
          "sdk_method": "documents.query"
        },
        "getDocument": {
          "label": "Get Document",
          "description": "Fetch a specific document by ID.",
          "inputs": [
            {
              "name": "dataContractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true,
              "placeholder": "domain"
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true,
              "placeholder": "7NYmEKQsYtniQRUmxwdPGeVcirMoPh5ZPyAKz8BWFy3r"
            }
          ],
          "sdk_method": "documents.get"
        }
      }
    },
    "dpns": {
      "label": "DPNS Queries",
      "queries": {
        "getDpnsUsername": {
          "label": "Get Primary Username",
          "description": "Fetch the primary DPNS username for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            }
          ],
          "sdk_method": "dpns.username"
        },
        "getDpnsUsernames": {
          "label": "List Usernames for Identity",
          "description": "Fetch all DPNS usernames owned by an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            }
          ],
          "sdk_method": "dpns.usernames"
        },
        "getDpnsUsernameByName": {
          "label": "Get Username by Name",
          "description": "Fetch DPNS username details by full name.",
          "inputs": [
            {
              "name": "username",
              "type": "text",
              "label": "Username",
              "required": true,
              "placeholder": "alice.dash"
            }
          ],
          "sdk_method": "dpns.getUsernameByName"
        },
        "dpnsResolve": {
          "label": "Resolve DPNS Name",
          "description": "Resolve a DPNS name to its identity information.",
          "inputs": [
            {
              "name": "name",
              "type": "text",
              "label": "DPNS Name",
              "required": true,
              "placeholder": "alice.dash"
            }
          ],
          "sdk_method": "dpns.resolveName"
        },
        "dpnsCheckAvailability": {
          "label": "Check DPNS Availability",
          "description": "Check if a DPNS label is available for registration.",
          "inputs": [
            {
              "name": "label",
              "type": "text",
              "label": "Label (Username)",
              "required": true,
              "placeholder": "alice"
            }
          ],
          "sdk_method": "dpns.isNameAvailable"
        },
        "dpnsConvertToHomographSafe": {
          "label": "Convert to Homograph Safe",
          "description": "Convert a label to its homograph-safe representation.",
          "inputs": [
            {
              "name": "name",
              "type": "text",
              "label": "Label",
              "required": true,
              "placeholder": "ąlice"
            }
          ],
          "sdk_method": "dpns.convertToHomographSafe"
        },
        "dpnsIsValidUsername": {
          "label": "Validate Username",
          "description": "Validate whether a label conforms to DPNS username rules.",
          "inputs": [
            {
              "name": "label",
              "type": "text",
              "label": "Label",
              "required": true,
              "placeholder": "alice"
            }
          ],
          "sdk_method": "dpns.isValidUsername"
        },
        "dpnsIsContestedUsername": {
          "label": "Is Contested Username",
          "description": "Check if a label is currently part of a contested DPNS registration.",
          "inputs": [
            {
              "name": "label",
              "type": "text",
              "label": "Label",
              "required": true,
              "placeholder": "alice"
            }
          ],
          "sdk_method": "dpns.isContestedUsername"
        }
      }
    },
    "voting": {
      "label": "Voting & Contested Resources",
      "queries": {
        "getContestedResources": {
          "label": "Get Contested Resources",
          "description": "List contested resources for a document type and index.",
          "inputs": [
            {
              "name": "documentTypeName",
              "type": "text",
              "label": "Document Type",
              "required": true,
              "placeholder": "domain"
            },
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "indexName",
              "type": "text",
              "label": "Index Name",
              "required": true
            },
            {
              "name": "startAtValue",
              "type": "text",
              "label": "Start At Value"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "group.contestedResources"
        },
        "getContestedResourceVoteState": {
          "label": "Get Contested Resource Vote State",
          "description": "Retrieve vote tallies for a contested resource.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "documentTypeName",
              "type": "text",
              "label": "Document Type",
              "required": true,
              "placeholder": "domain"
            },
            {
              "name": "indexName",
              "type": "text",
              "label": "Index Name",
              "required": true
            },
            {
              "name": "indexValues",
              "type": "array",
              "label": "Index Values",
              "required": true,
              "placeholder": "[\"dash\",\"alice\"]"
            },
            {
              "name": "resultType",
              "type": "text",
              "label": "Result Type",
              "required": true,
              "placeholder": "documents"
            },
            {
              "name": "allowIncludeLockedAndAbstainingVoteTally",
              "type": "checkbox",
              "label": "Include Locked & Abstaining Tallies"
            },
            {
              "name": "startAtIdentifierInfo",
              "type": "text",
              "label": "Start At Identifier Info"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "voting.contestedResourceVoteState"
        },
        "getContestedResourceVotersForIdentity": {
          "label": "Get Voters for Identity",
          "description": "List voters that voted for a specific identity in a contested resource.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
            },
            {
              "name": "documentTypeName",
              "type": "text",
              "label": "Document Type",
              "required": true,
              "placeholder": "domain"
            },
            {
              "name": "indexName",
              "type": "text",
              "label": "Index Name",
              "required": true
            },
            {
              "name": "indexValues",
              "type": "array",
              "label": "Index Values",
              "required": true,
              "placeholder": "[\"dash\",\"alice\"]"
            },
            {
              "name": "contestantId",
              "type": "text",
              "label": "Contestant Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "startAtVoterInfo",
              "type": "text",
              "label": "Start At Voter Info"
            },
            {
              "name": "startAtIdentifierInfo",
              "type": "text",
              "label": "Start At Identifier Info (Proof)"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count (Proof)"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "group.contestedResourceVotersForIdentity"
        },
        "getContestedResourceIdentityVotes": {
          "label": "Get Identity Votes",
          "description": "Fetch contested resource votes submitted by a particular identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "startAtVotePollIdInfo",
              "type": "text",
              "label": "Start At Vote Poll Info"
            },
            {
              "name": "offset",
              "type": "number",
              "label": "Offset (Proof)"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "voting.contestedResourceIdentityVotes"
        },
        "getVotePollsByEndDate": {
          "label": "Get Vote Polls by End Date",
          "description": "Fetch vote polls filtered by end time. Use JSON time info for standard responses or millisecond timestamps with proof.",
          "inputs": [
            {
              "name": "startTimeInfo",
              "type": "json",
              "label": "Start Time Info (JSON)",
              "help": "Used when proofs are disabled."
            },
            {
              "name": "endTimeInfo",
              "type": "json",
              "label": "End Time Info (JSON)",
              "help": "Used when proofs are disabled."
            },
            {
              "name": "startTimeMs",
              "type": "number",
              "label": "Start Time (ms)",
              "help": "Used when proofs are enabled."
            },
            {
              "name": "endTimeMs",
              "type": "number",
              "label": "End Time (ms)",
              "help": "Used when proofs are enabled."
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "offset",
              "type": "number",
              "label": "Offset (Proof)"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "voting.votePollsByEndDate"
        }
      }
    },
    "protocol": {
      "label": "Protocol & Version",
      "queries": {
        "getProtocolVersionUpgradeState": {
          "label": "Get Protocol Version Upgrade State",
          "description": "Retrieve protocol upgrade vote tallies.",
          "inputs": [],
          "sdk_method": "protocol.versionUpgradeState"
        },
        "getProtocolVersionUpgradeVoteStatus": {
          "label": "Get Protocol Version Vote Status",
          "description": "Fetch voting status for masternodes on protocol upgrades.",
          "inputs": [
            {
              "name": "startProTxHash",
              "type": "text",
              "label": "Start ProTxHash",
              "placeholder": "143dcd6a6b7684fde01e88a10e5d65de9a29244c5ecd586d14a342657025f113"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            }
          ],
          "sdk_method": "protocol.versionUpgradeVoteStatus"
        }
      }
    },
    "epoch": {
      "label": "Epoch & Block Queries",
      "queries": {
        "getEpochsInfo": {
          "label": "Get Epochs Info",
          "description": "Retrieve summary information for one or more epochs.",
          "inputs": [
            {
              "name": "startEpoch",
              "type": "number",
              "label": "Start Epoch"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            },
            {
              "name": "ascending",
              "type": "checkbox",
              "label": "Ascending Order"
            }
          ],
          "sdk_method": "epoch.epochsInfo"
        },
        "getCurrentEpoch": {
          "label": "Get Current Epoch",
          "description": "Fetch the current platform epoch.",
          "inputs": [],
          "sdk_method": "epoch.current"
        },
        "getFinalizedEpochInfos": {
          "label": "Get Finalized Epoch Infos",
          "description": "Retrieve finalized epoch information for a range.",
          "inputs": [
            {
              "name": "startEpoch",
              "type": "number",
              "label": "Start Epoch"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            },
            {
              "name": "ascending",
              "type": "checkbox",
              "label": "Ascending Order"
            }
          ],
          "sdk_method": "epoch.finalizedInfos"
        },
        "getEvonodesProposedEpochBlocksByIds": {
          "label": "Get Epoch Blocks by Evonode IDs",
          "description": "Fetch proposed blocks for specific evonode ProTx hashes.",
          "inputs": [
            {
              "name": "epoch",
              "type": "number",
              "label": "Epoch",
              "required": true
            },
            {
              "name": "ids",
              "type": "array",
              "label": "Evonode ProTx Hashes",
              "required": true,
              "placeholder": "[\"143dcd6a6b7684fde01e88a10e5d65de9a29244c5ecd586d14a342657025f113\"]"
            }
          ],
          "sdk_method": "epoch.evonodesProposedBlocksByIds"
        },
        "getEvonodesProposedEpochBlocksByRange": {
          "label": "Get Epoch Blocks by Range",
          "description": "Fetch proposed blocks in range order.",
          "inputs": [
            {
              "name": "epoch",
              "type": "number",
              "label": "Epoch",
              "required": true
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            },
            {
              "name": "startAfter",
              "type": "text",
              "label": "Start After (ProTxHash)",
              "placeholder": "143dcd6a6b7684fde01e88a10e5d65de9a29244c5ecd586d14a342657025f113"
            },
            {
              "name": "orderAscending",
              "type": "checkbox",
              "label": "Order Ascending"
            }
          ],
          "sdk_method": "epoch.evonodesProposedBlocksByRange"
        }
      }
    },
    "token": {
      "label": "Token Queries",
      "queries": {
        "getTokenStatuses": {
          "label": "Get Token Statuses",
          "description": "Retrieve status information for one or more tokens.",
          "inputs": [
            {
              "name": "tokenIds",
              "type": "array",
              "label": "Token IDs",
              "required": true,
              "placeholder": "[\"Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv\"]"
            }
          ],
          "sdk_method": "tokens.statuses"
        },
        "getTokenDirectPurchasePrices": {
          "label": "Get Direct Purchase Prices",
          "description": "Fetch direct purchase prices for tokens.",
          "inputs": [
            {
              "name": "tokenIds",
              "type": "array",
              "label": "Token IDs",
              "required": true,
              "placeholder": "[\"Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv\"]"
            }
          ],
          "sdk_method": "tokens.directPurchasePrices"
        },
        "getTokenContractInfo": {
          "label": "Get Token Contract Info",
          "description": "Retrieve metadata for a token contract.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Token Contract ID",
              "required": true,
              "placeholder": "ALybvzfcCwMs7sinDwmtumw17NneuW7RgFtFHgjKmF3A"
            }
          ],
          "sdk_method": "tokens.contractInfo"
        },
        "getTokenPerpetualDistributionLastClaim": {
          "label": "Get Token Distribution Last Claim",
          "description": "Fetch the last perpetual distribution claim for an identity and token.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "tokenId",
              "type": "text",
              "label": "Token ID",
              "required": true,
              "placeholder": "Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv"
            }
          ],
          "sdk_method": "tokens.perpetualDistributionLastClaim"
        },
        "getTokenTotalSupply": {
          "label": "Get Token Total Supply",
          "description": "Fetch the total supply for a token.",
          "inputs": [
            {
              "name": "tokenId",
              "type": "text",
              "label": "Token ID",
              "required": true,
              "placeholder": "Hqyu8WcRwXCTwbNxdga4CN5gsVEGc67wng4TFzceyLUv"
            }
          ],
          "sdk_method": "tokens.totalSupply"
        },
        "getTokenPriceByContract": {
          "label": "Get Token Price by Contract",
          "description": "Retrieve the price details for a token indexed by contract position.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Token Contract ID",
              "required": true,
              "placeholder": "ALybvzfcCwMs7sinDwmtumw17NneuW7RgFtFHgjKmF3A"
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Position",
              "required": true,
              "placeholder": "0"
            }
          ],
          "sdk_method": "tokens.priceByContract"
        }
      }
    },
    "group": {
      "label": "Group Queries",
      "queries": {
        "getGroupInfo": {
          "label": "Get Group Info",
          "description": "Fetch metadata for a specific group contract position.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Group Contract ID",
              "required": true,
              "placeholder": "49PJEnNx7ReCitzkLdkDNr4s6RScGsnNexcdSZJ1ph5N"
            },
            {
              "name": "groupContractPosition",
              "type": "number",
              "label": "Group Position",
              "required": true,
              "placeholder": "0"
            }
          ],
          "sdk_method": "group.info"
        },
        "getGroupInfos": {
          "label": "List Group Infos",
          "description": "List group information entries for a contract.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Group Contract ID",
              "required": true,
              "placeholder": "49PJEnNx7ReCitzkLdkDNr4s6RScGsnNexcdSZJ1ph5N"
            },
            {
              "name": "startAtInfo",
              "type": "text",
              "label": "Start At Info"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            }
          ],
          "sdk_method": "group.infos"
        },
        "getGroupMembers": {
          "label": "Get Group Members",
          "description": "Retrieve member entries for a group.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Group Contract ID",
              "required": true,
              "placeholder": "49PJEnNx7ReCitzkLdkDNr4s6RScGsnNexcdSZJ1ph5N"
            },
            {
              "name": "groupContractPosition",
              "type": "number",
              "label": "Group Position",
              "required": true,
              "placeholder": "0"
            },
            {
              "name": "memberIds",
              "type": "array",
              "label": "Member Identity IDs"
            },
            {
              "name": "startAt",
              "type": "text",
              "label": "Start At Member Info"
            },
            {
              "name": "limit",
              "type": "number",
              "label": "Limit"
            }
          ],
          "sdk_method": "group.members"
        },
        "getGroupActions": {
          "label": "Get Group Actions",
          "description": "Fetch actions associated with a group.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Group Contract ID",
              "required": true,
              "placeholder": "49PJEnNx7ReCitzkLdkDNr4s6RScGsnNexcdSZJ1ph5N"
            },
            {
              "name": "groupContractPosition",
              "type": "number",
              "label": "Group Position",
              "required": true,
              "placeholder": "0"
            },
            {
              "name": "status",
              "type": "select",
              "label": "Action Status",
              "required": true,
              "options": [
                {
                  "value": "PENDING",
                  "label": "PENDING"
                },
                {
                  "value": "ACTIVE",
                  "label": "ACTIVE"
                },
                {
                  "value": "EXECUTED",
                  "label": "EXECUTED"
                },
                {
                  "value": "CANCELLED",
                  "label": "CANCELLED"
                }
              ]
            },
            {
              "name": "startAtInfo",
              "type": "text",
              "label": "Start At Action Info"
            },
            {
              "name": "count",
              "type": "number",
              "label": "Count"
            }
          ],
          "sdk_method": "group.actions"
        },
        "getGroupActionSigners": {
          "label": "Get Group Action Signers",
          "description": "List signers for a specific group action.",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Group Contract ID",
              "required": true,
              "placeholder": "49PJEnNx7ReCitzkLdkDNr4s6RScGsnNexcdSZJ1ph5N"
            },
            {
              "name": "groupContractPosition",
              "type": "number",
              "label": "Group Position",
              "required": true,
              "placeholder": "0"
            },
            {
              "name": "status",
              "type": "select",
              "label": "Action Status",
              "required": true,
              "options": [
                {
                  "value": "PENDING",
                  "label": "PENDING"
                },
                {
                  "value": "ACTIVE",
                  "label": "ACTIVE"
                },
                {
                  "value": "EXECUTED",
                  "label": "EXECUTED"
                },
                {
                  "value": "CANCELLED",
                  "label": "CANCELLED"
                }
              ]
            },
            {
              "name": "actionId",
              "type": "text",
              "label": "Action ID",
              "required": true
            }
          ],
          "sdk_method": "group.actionSigners"
        },
        "getIdentityGroups": {
          "label": "Get Identity Groups",
          "description": "Fetch group memberships for an identity.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk"
            },
            {
              "name": "memberDataContracts",
              "type": "array",
              "label": "Member Data Contracts"
            },
            {
              "name": "ownerDataContracts",
              "type": "array",
              "label": "Owner Data Contracts"
            },
            {
              "name": "moderatorDataContracts",
              "type": "array",
              "label": "Moderator Data Contracts"
            }
          ],
          "sdk_method": "group.identityGroups"
        },
        "getGroupsDataContracts": {
          "label": "Get Groups Data Contracts",
          "description": "Fetch group configuration documents for the supplied data contracts.",
          "inputs": [
            {
              "name": "dataContractIds",
              "type": "array",
              "label": "Data Contract IDs",
              "required": true,
              "placeholder": "[\"GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec\"]"
            }
          ],
          "sdk_method": "group.groupsDataContracts"
        }
      }
    },
    "system": {
      "label": "System & Utility",
      "queries": {
        "getStatus": {
          "label": "Get Platform Status",
          "description": "Retrieve basic platform status information.",
          "inputs": [],
          "sdk_method": "system.status"
        },
        "getCurrentQuorumsInfo": {
          "label": "Get Current Quorums Info",
          "description": "Fetch details about currently active quorums.",
          "inputs": [],
          "sdk_method": "system.currentQuorumsInfo"
        },
        "getPrefundedSpecializedBalance": {
          "label": "Get Prefunded Specialized Balance",
          "description": "Retrieve a prefunded specialized balance entry.",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Specialized Balance ID",
              "required": true,
              "placeholder": "AzaU7zqCT7X1kxh8yWxkT9PxAgNqWDu4Gz13emwcRyAT"
            }
          ],
          "sdk_method": "system.prefundedSpecializedBalance"
        },
        "getTotalCreditsInPlatform": {
          "label": "Get Total Credits in Platform",
          "description": "Fetch the total credit balance stored in the platform.",
          "inputs": [],
          "sdk_method": "system.totalCreditsInPlatform"
        },
        "getPathElements": {
          "label": "Get Path Elements",
          "description": "Access items in the GroveDB state tree by specifying a path and keys.",
          "inputs": [
            {
              "name": "path",
              "type": "array",
              "label": "Path Segments",
              "required": true,
              "placeholder": "[\"32\"]"
            },
            {
              "name": "keys",
              "type": "array",
              "label": "Keys",
              "required": true,
              "placeholder": "[\"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"]"
            }
          ],
          "sdk_method": "system.pathElements"
        },
        "waitForStateTransitionResult": {
          "label": "Wait for State Transition Result",
          "description": "Wait for a state transition to be processed and return the result.",
          "inputs": [
            {
              "name": "stateTransitionHash",
              "type": "text",
              "label": "State Transition Hash",
              "required": true,
              "placeholder": "0000000000000000000000000000000000000000000000000000000000000000"
            }
          ],
          "sdk_method": "system.waitForStateTransitionResult"
        }
      }
    }
  },
  "transitions": {
    "identity": {
      "label": "Identity Transitions",
      "transitions": {
        "identityCreate": {
          "label": "Identity Create",
          "description": "Create a new identity with initial credits",
          "inputs": [
            {
              "name": "seedPhrase",
              "type": "textarea",
              "label": "Seed Phrase",
              "required": true,
              "placeholder": "Enter seed phrase (12-24 words) or click Generate",
              "help": "The wallet seed phrase that will be used to derive identity keys"
            },
            {
              "name": "generateSeedButton",
              "type": "button",
              "label": "Generate New Seed",
              "action": "generateTestSeed"
            },
            {
              "name": "identityIndex",
              "type": "number",
              "label": "Identity Index",
              "required": true,
              "value": 0,
              "min": 0,
              "max": 999,
              "help": "The identity index is an internal reference within the wallet. Leave as 0 for first identity."
            },
            {
              "name": "keySelectionMode",
              "type": "select",
              "label": "Key Selection Mode",
              "required": true,
              "value": "default",
              "options": [
                {
                  "value": "default",
                  "label": "Default (Recommended)"
                },
                {
                  "value": "advanced",
                  "label": "Advanced"
                }
              ],
              "help": "Default adds standard keys for most Platform operations. Advanced allows custom key configuration."
            },
            {
              "name": "keyType",
              "type": "select",
              "label": "Key Type",
              "required": true,
              "value": "ECDSA_HASH160",
              "options": [
                {
                  "value": "ECDSA_HASH160",
                  "label": "ECDSA_HASH160 (Dash Evo Tool default)"
                },
                {
                  "value": "ECDSA_SECP256K1",
                  "label": "ECDSA_SECP256K1 (Dash mobile wallet default)"
                }
              ],
              "help": "Choose key type"
            },
            {
              "name": "keyPreview",
              "type": "keyPreview",
              "label": "Keys to be added",
              "help": "These keys will be added to your new identity"
            }
          ],
          "sdk_params": [
            {
              "name": "assetLockProof",
              "type": "string",
              "label": "Asset Lock Proof",
              "required": true,
              "description": "Hex-encoded JSON asset lock proof"
            },
            {
              "name": "assetLockProofPrivateKey",
              "type": "string",
              "label": "Asset Lock Proof Private Key",
              "required": true,
              "description": "WIF format private key"
            },
            {
              "name": "publicKeys",
              "type": "string",
              "label": "Public Keys",
              "required": true,
              "description": "JSON array of public keys. Key requirements: ECDSA_SECP256K1 requires privateKeyHex or privateKeyWif for signing, BLS12_381 requires privateKeyHex for signing, ECDSA_HASH160 requires either the data field (base64-encoded 20-byte public key hash) or privateKeyHex (produces empty signatures)."
            }
          ],
          "sdk_example": "// Asset lock proof is a hex-encoded JSON object\nconst assetLockProof = \"a9147d3b... (hex-encoded)\";\nconst assetLockProofPrivateKey = \"XFfpaSbZq52HPy3WWwe1dXsZMiU1bQn8vQd34HNXkSZThevBWRn1\"; // WIF format\n\n// Public keys array with proper key types\nconst publicKeys = JSON.stringify([\n  {\n    id: 0,\n    type: 0, // ECDSA_SECP256K1 = 0, BLS12_381 = 1, ECDSA_HASH160 = 2, BIP13_SCRIPT_HASH = 3\n    purpose: 0, // AUTHENTICATION = 0, ENCRYPTION = 1, DECRYPTION = 2, TRANSFER = 3, WITHDRAW = 4, VOTING = 5, OWNER = 6\n    securityLevel: 0, // MASTER = 0, CRITICAL = 1, HIGH = 2, MEDIUM = 3\n    data: \"A5GzYHPIolbHkFrp5l+s9IvF2lWMuuuSu3oWZB8vWHNJ\", // Base64-encoded public key\n    readOnly: false,\n    privateKeyWif: \"XBrZJKcW4ajWVNAU6yP87WQog6CjFnpbqyAKgNTZRqmhYvPgMNV2\" // Required for ECDSA_SECP256K1 signing\n  },\n  {\n    id: 1,\n    type: 0, // ECDSA_SECP256K1\n    purpose: 0, // AUTHENTICATION\n    securityLevel: 2, // HIGH\n    data: \"AnotherBase64EncodedPublicKeyHere\", // Base64-encoded public key\n    readOnly: false,\n    privateKeyWif: \"XAnotherPrivateKeyInWIFFormat\" // Required for signing\n  },\n  {\n    id: 2,\n    type: 2, // ECDSA_HASH160\n    purpose: 0, // AUTHENTICATION\n    securityLevel: 2, // HIGH\n    data: \"ripemd160hash20bytes1234\", // Base64-encoded 20-byte RIPEMD160 hash\n    readOnly: false\n    // ECDSA_HASH160 keys produce empty signatures (privateKey not required/used for signing)\n  }\n]);\n\nconst result = await client.identities.create({ assetLockProof, assetLockProofPrivateKey, publicKeys });",
          "sdk_method": "identities.create"
        },
        "identityTopUp": {
          "label": "Identity Top Up",
          "description": "Add credits to an existing identity",
          "inputs": [
            {
              "name": "identityId",
              "type": "text",
              "label": "Identity ID",
              "required": true,
              "placeholder": "Enter the identity ID to top up (base58)",
              "help": "The identity ID that will receive the credits from the asset lock proof"
            }
          ],
          "sdk_params": [
            {
              "name": "identityId",
              "type": "string",
              "label": "Identity ID",
              "required": true,
              "description": "Base58 format identity ID"
            },
            {
              "name": "assetLockProof",
              "type": "string",
              "label": "Asset Lock Proof",
              "required": true,
              "description": "Hex-encoded JSON asset lock proof"
            },
            {
              "name": "assetLockProofPrivateKey",
              "type": "string",
              "label": "Asset Lock Proof Private Key",
              "required": true,
              "description": "WIF format private key"
            }
          ],
          "sdk_example": "const identityId = \"5DbLwAxGBzUzo81VewMUwn4b5P4bpv9FNFybi25XB5Bk\"; // base58\nconst assetLockProof = \"a9147d3b... (hex-encoded)\";\nconst assetLockProofPrivateKey = \"XFfpaSbZq52HPy3WWve1dXsZMiU1bQn8vQd34HNXkSZThevBWRn1\"; // WIF format\n\nconst result = await sdk.identities.topup({ identityId, assetLockProof, assetLockProofPrivateKey });",
          "sdk_method": "identities.topup"
        },
        "identityUpdate": {
          "label": "Identity Update",
          "description": "Update identity keys (add or disable)",
          "inputs": [
            {
              "name": "addPublicKeys",
              "type": "textarea",
              "label": "Keys to Add (JSON array)",
              "required": false,
              "placeholder": "[{\"keyType\":\"ECDSA_HASH160\",\"purpose\":\"AUTHENTICATION\",\"data\":\"base64_key_data\"}]"
            },
            {
              "name": "disablePublicKeys",
              "type": "text",
              "label": "Key IDs to Disable (comma-separated)",
              "required": false,
              "placeholder": "2,3,5"
            }
          ],
          "sdk_method": "identities.update"
        },
        "identityCreditTransfer": {
          "label": "Identity Credit Transfer",
          "description": "Transfer credits between identities",
          "inputs": [
            {
              "name": "recipientId",
              "type": "text",
              "label": "Recipient Identity ID",
              "required": true
            },
            {
              "name": "amount",
              "type": "number",
              "label": "Amount (credits)",
              "required": true
            }
          ],
          "sdk_method": "identities.creditTransfer"
        },
        "identityCreditWithdrawal": {
          "label": "Identity Credit Withdrawal",
          "description": "Withdraw credits from identity to Dash address",
          "inputs": [
            {
              "name": "toAddress",
              "type": "text",
              "label": "Dash Address",
              "required": true
            },
            {
              "name": "amount",
              "type": "number",
              "label": "Amount (credits)",
              "required": true
            },
            {
              "name": "coreFeePerByte",
              "type": "number",
              "label": "Core Fee Per Byte (optional)",
              "required": false
            }
          ],
          "sdk_method": "identities.creditWithdrawal"
        }
      }
    },
    "dataContract": {
      "label": "Data Contract Transitions",
      "transitions": {
        "dataContractCreate": {
          "label": "Data Contract Create",
          "description": "Create a new data contract",
          "inputs": [
            {
              "name": "canBeDeleted",
              "type": "checkbox",
              "label": "Can Be Deleted",
              "required": false
            },
            {
              "name": "readonly",
              "type": "checkbox",
              "label": "Read Only",
              "required": false
            },
            {
              "name": "keepsHistory",
              "type": "checkbox",
              "label": "Keeps History",
              "required": false
            },
            {
              "name": "documentsKeepHistoryContractDefault",
              "type": "checkbox",
              "label": "Documents Keep History (Default)",
              "required": false
            },
            {
              "name": "documentsMutableContractDefault",
              "type": "checkbox",
              "label": "Documents Mutable (Default)",
              "required": false,
              "default": true
            },
            {
              "name": "documentsCanBeDeletedContractDefault",
              "type": "checkbox",
              "label": "Documents Can Be Deleted (Default)",
              "required": false,
              "default": true
            },
            {
              "name": "requiresIdentityEncryptionBoundedKey",
              "type": "text",
              "label": "Requires Identity Encryption Key (optional)",
              "required": false
            },
            {
              "name": "requiresIdentityDecryptionBoundedKey",
              "type": "text",
              "label": "Requires Identity Decryption Key (optional)",
              "required": false
            },
            {
              "name": "documentSchemas",
              "type": "json",
              "label": "Document Schemas JSON",
              "required": true,
              "placeholder": "{\n  \"note\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\",\n        \"maxLength\": 100,\n        \"position\": 0\n      }\n    },\n    \"required\": [\"message\"],\n    \"additionalProperties\": false\n  }\n}"
            },
            {
              "name": "groups",
              "type": "json",
              "label": "Groups (optional)",
              "required": false,
              "placeholder": "{}"
            },
            {
              "name": "tokens",
              "type": "json",
              "label": "Tokens (optional)",
              "required": false,
              "placeholder": "{}"
            },
            {
              "name": "keywords",
              "type": "text",
              "label": "Keywords (comma separated, optional)",
              "required": false
            },
            {
              "name": "description",
              "type": "text",
              "label": "Description (optional)",
              "required": false
            }
          ],
          "sdk_method": "contracts.create"
        },
        "dataContractUpdate": {
          "label": "Data Contract Update",
          "description": "Add document types, groups, or tokens to an existing data contract",
          "inputs": [
            {
              "name": "dataContractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "newDocumentSchemas",
              "type": "json",
              "label": "New Document Schemas to Add (optional)",
              "required": false,
              "placeholder": "{\n  \"newType\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"field\": {\n        \"type\": \"string\",\n        \"maxLength\": 100,\n        \"position\": 0\n      }\n    },\n    \"required\": [\"field\"],\n    \"additionalProperties\": false\n  }\n}"
            },
            {
              "name": "newGroups",
              "type": "json",
              "label": "New Groups to Add (optional)",
              "required": false,
              "placeholder": "{}"
            },
            {
              "name": "newTokens",
              "type": "json",
              "label": "New Tokens to Add (optional)",
              "required": false,
              "placeholder": "{}"
            }
          ],
          "sdk_method": "contracts.update"
        }
      }
    },
    "document": {
      "label": "Document Transitions",
      "transitions": {
        "documentCreate": {
          "label": "Document Create",
          "description": "Create a new document",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "fetchSchema",
              "type": "button",
              "label": "Fetch Schema",
              "action": "fetchDocumentSchema"
            },
            {
              "name": "documentFields",
              "type": "dynamic",
              "label": "Document Fields"
            }
          ],
          "sdk_method": "documents.create"
        },
        "documentReplace": {
          "label": "Document Replace",
          "description": "Replace an existing document",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true
            },
            {
              "name": "loadDocument",
              "type": "button",
              "label": "Load Document",
              "action": "loadExistingDocument"
            },
            {
              "name": "documentFields",
              "type": "dynamic",
              "label": "Document Fields"
            }
          ],
          "sdk_method": "documents.replace"
        },
        "documentDelete": {
          "label": "Document Delete",
          "description": "Delete an existing document",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true
            }
          ],
          "sdk_method": "documents.delete"
        },
        "documentTransfer": {
          "label": "Document Transfer",
          "description": "Transfer document ownership",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true
            },
            {
              "name": "recipientId",
              "type": "text",
              "label": "Recipient Identity ID",
              "required": true
            }
          ],
          "sdk_method": "documents.transfer"
        },
        "documentPurchase": {
          "label": "Document Purchase",
          "description": "Purchase a document",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true
            },
            {
              "name": "price",
              "type": "number",
              "label": "Price (credits)",
              "required": true
            }
          ],
          "sdk_method": "documents.purchase"
        },
        "documentSetPrice": {
          "label": "Document Set Price",
          "description": "Set or update document price",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "documentType",
              "type": "text",
              "label": "Document Type",
              "required": true
            },
            {
              "name": "documentId",
              "type": "text",
              "label": "Document ID",
              "required": true
            },
            {
              "name": "price",
              "type": "number",
              "label": "Price (credits, 0 to remove)",
              "required": true
            }
          ],
          "sdk_method": "documents.setPrice"
        },
        "dpnsRegister": {
          "label": "DPNS Register Name",
          "description": "Register a new DPNS username",
          "inputs": [
            {
              "name": "label",
              "type": "text",
              "label": "Username",
              "required": true,
              "placeholder": "Enter username (e.g., alice)",
              "validateOnType": true
            }
          ],
          "sdk_method": "dpns.registerName"
        }
      }
    },
    "token": {
      "label": "Token Transitions",
      "transitions": {
        "tokenBurn": {
          "label": "Token Burn",
          "description": "Burn tokens",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "amount",
              "type": "text",
              "label": "Amount to Burn",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.burn"
        },
        "tokenMint": {
          "label": "Token Mint",
          "description": "Mint new tokens",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "amount",
              "type": "text",
              "label": "Amount to Mint",
              "required": true
            },
            {
              "name": "issuedToIdentityId",
              "type": "text",
              "label": "Issue To Identity ID",
              "required": false
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.mint"
        },
        "tokenClaim": {
          "label": "Token Claim",
          "description": "Claim tokens from a distribution",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "distributionType",
              "type": "select",
              "label": "Distribution Type",
              "required": true,
              "options": [
                {
                  "value": "perpetual",
                  "label": "Perpetual"
                },
                {
                  "value": "preprogrammed",
                  "label": "Pre-programmed"
                }
              ]
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.claim"
        },
        "tokenSetPriceForDirectPurchase": {
          "label": "Token Set Price",
          "description": "Set or update the price for direct token purchases",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "priceType",
              "type": "select",
              "label": "Price Type",
              "required": true,
              "options": [
                {
                  "value": "single",
                  "label": "Single Price"
                },
                {
                  "value": "tiered",
                  "label": "Tiered Pricing"
                }
              ]
            },
            {
              "name": "priceData",
              "type": "text",
              "label": "Price Data (single price or JSON map)",
              "required": false,
              "placeholder": "Leave empty to remove pricing"
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.setPriceForDirectPurchase"
        },
        "tokenDirectPurchase": {
          "label": "Token Direct Purchase",
          "description": "Purchase tokens directly at the configured price",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "amount",
              "type": "text",
              "label": "Amount to Purchase",
              "required": true
            },
            {
              "name": "totalAgreedPrice",
              "type": "text",
              "label": "Total Agreed Price (in credits) - Optional, fetches from pricing schedule if not provided",
              "required": false
            }
          ],
          "sdk_method": "tokens.directPurchase"
        },
        "tokenConfigUpdate": {
          "label": "Token Config Update",
          "description": "Update token configuration settings",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "configItemType",
              "type": "select",
              "label": "Config Item Type",
              "required": true,
              "options": [
                {
                  "value": "conventions",
                  "label": "Conventions"
                },
                {
                  "value": "max_supply",
                  "label": "Max Supply"
                },
                {
                  "value": "perpetual_distribution",
                  "label": "Perpetual Distribution"
                },
                {
                  "value": "new_tokens_destination_identity",
                  "label": "New Tokens Destination Identity"
                },
                {
                  "value": "minting_allow_choosing_destination",
                  "label": "Minting Allow Choosing Destination"
                },
                {
                  "value": "manual_minting",
                  "label": "Manual Minting"
                },
                {
                  "value": "manual_burning",
                  "label": "Manual Burning"
                },
                {
                  "value": "conventions_control_group",
                  "label": "Conventions Control Group"
                },
                {
                  "value": "conventions_admin_group",
                  "label": "Conventions Admin Group"
                },
                {
                  "value": "max_supply_control_group",
                  "label": "Max Supply Control Group"
                },
                {
                  "value": "max_supply_admin_group",
                  "label": "Max Supply Admin Group"
                }
              ]
            },
            {
              "name": "configValue",
              "type": "text",
              "label": "Config Value (JSON or specific value)",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.configUpdate"
        },
        "tokenTransfer": {
          "label": "Token Transfer",
          "description": "Transfer tokens between identities",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "amount",
              "type": "text",
              "label": "Amount to Transfer",
              "required": true
            },
            {
              "name": "recipientId",
              "type": "text",
              "label": "Recipient Identity ID",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.transfer"
        },
        "tokenFreeze": {
          "label": "Token Freeze",
          "description": "Freeze tokens for a specific identity",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "identityToFreeze",
              "type": "text",
              "label": "Identity ID to Freeze",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.freeze"
        },
        "tokenUnfreeze": {
          "label": "Token Unfreeze",
          "description": "Unfreeze tokens for a specific identity",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "identityToUnfreeze",
              "type": "text",
              "label": "Identity ID to Unfreeze",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.unfreeze"
        },
        "tokenDestroyFrozen": {
          "label": "Token Destroy Frozen",
          "description": "Destroy frozen tokens",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true
            },
            {
              "name": "tokenPosition",
              "type": "number",
              "label": "Token Contract Position",
              "required": true
            },
            {
              "name": "frozenIdentityId",
              "type": "text",
              "label": "Identity ID whose frozen tokens to destroy",
              "required": true
            },
            {
              "name": "publicNote",
              "type": "text",
              "label": "Public Note",
              "required": false
            }
          ],
          "sdk_method": "tokens.destroyFrozen"
        }
      }
    },
    "voting": {
      "label": "Voting Transitions",
      "transitions": {
        "dpnsUsername": {
          "label": "DPNS Username",
          "description": "Cast a vote for a contested DPNS username",
          "inputs": [
            {
              "name": "contestedUsername",
              "type": "text",
              "label": "Contested Username",
              "required": true,
              "placeholder": "Enter the contested username (e.g., 'myusername')"
            },
            {
              "name": "voteChoice",
              "type": "select",
              "label": "Vote Choice",
              "required": true,
              "options": [
                {
                  "value": "abstain",
                  "label": "Abstain"
                },
                {
                  "value": "lock",
                  "label": "Lock (Give to no one)"
                },
                {
                  "value": "towardsIdentity",
                  "label": "Vote for Identity"
                }
              ]
            },
            {
              "name": "targetIdentity",
              "type": "text",
              "label": "Target Identity ID (if voting for identity)",
              "required": false,
              "placeholder": "Identity ID to vote for",
              "dependsOn": {
                "field": "voteChoice",
                "value": "towardsIdentity"
              }
            }
          ],
          "sdk_method": "voting.masternodeVote"
        },
        "masternodeVote": {
          "label": "Contested Resource",
          "description": "Cast a vote for contested resources as a masternode",
          "inputs": [
            {
              "name": "contractId",
              "type": "text",
              "label": "Data Contract ID",
              "required": true,
              "placeholder": "Contract ID containing the contested resource"
            },
            {
              "name": "fetchContestedResources",
              "type": "button",
              "label": "Get Contested Resources",
              "action": "fetchContestedResources"
            },
            {
              "name": "contestedResourceDropdown",
              "type": "dynamic",
              "label": "Contested Resources"
            },
            {
              "name": "voteChoice",
              "type": "select",
              "label": "Vote Choice",
              "required": true,
              "options": [
                {
                  "value": "abstain",
                  "label": "Abstain"
                },
                {
                  "value": "lock",
                  "label": "Lock (Give to no one)"
                },
                {
                  "value": "towardsIdentity",
                  "label": "Vote for Identity"
                }
              ]
            },
            {
              "name": "targetIdentity",
              "type": "text",
              "label": "Target Identity ID (if voting for identity)",
              "required": false,
              "placeholder": "Identity ID to vote for",
              "dependsOn": {
                "field": "voteChoice",
                "value": "towardsIdentity"
              }
            }
          ],
          "sdk_method": "voting.masternodeVote"
        }
      }
    }
  }
}
